[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ggtranscript","title":"Contributing to ggtranscript","text":"outlines propose change ggtranscript. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to ggtranscript","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to ggtranscript","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to ggtranscript","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"dzhang32/ggtranscript\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to ggtranscript","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to ggtranscript","text":"Please note ggtranscript project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/articles/ggtranscript.html","id":"basics","dir":"Articles","previous_headings":"","what":"Basics","title":"Introduction to ggtranscript","text":"completed…","code":""},{"path":"/articles/ggtranscript.html","id":"install-ggtranscript","dir":"Articles","previous_headings":"Basics","what":"Install ggtranscript","title":"Introduction to ggtranscript","text":"R open-source statistical environment can easily modified enhance functionality via packages. ggtranscript R package available via Bioconductor repository packages. R can installed operating system CRAN can install ggtranscript using following commands R session:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"ggtranscript\")  ## Check that you have a valid Bioconductor installation BiocManager::valid()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Zhang. Author, maintainer. Emil Gustavsson. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang D, Gustavsson E (2022). ggtranscript: Visualising transcript structure annotation using ggplot2. R package version 0.99.1, https://github.com/dzhang32/ggtranscript.","code":"@Manual{,   title = {ggtranscript: Visualising transcript structure and annotation using ggplot2},   author = {David Zhang and Emil Gustavsson},   year = {2022},   note = {R package version 0.99.1},   url = {https://github.com/dzhang32/ggtranscript}, }"},{"path":"/index.html","id":"ggtranscript-","dir":"","previous_headings":"","what":"Visualising transcript structure and annotation using ggplot2","title":"Visualising transcript structure and annotation using ggplot2","text":"ggtranscript ggplot2 extension makes easy visualize transcript structure annotation.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualising transcript structure and annotation using ggplot2","text":"","code":"devtools::install_github(\"dzhang32/ggtranscript\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Visualising transcript structure and annotation using ggplot2","text":"ggtranscript introduces 3 new geoms designed visualise transcript annotation; geom_range(), geom_intron() geom_junction(). geom_range() geom_intron() enable plotting exons introns. ggtranscript also provides useful helpful function to_intron convert exon co-ordinates corresponding introns.  geom_range can used genomic range based annotation. example, plotting protein-coding transcripts, can useful visually distinguish coding segments UTRs.  working short-read RNA-sequencing data, can useful check whether known transcript structure junction support using geom_junction().","code":"library(magrittr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(ggtranscript)  # gene annotation for the an example gene (GBA) gba_ens_105 %>% head() #> # A tibble: 6 × 8 #>   seqnames  start    end strand type  gene_name transcript_name transcript_biot… #>   <fct>     <int>  <int> <fct>  <fct> <chr>     <chr>           <chr>            #> 1 1        1.55e8 1.55e8 -      gene  GBA       <NA>            <NA>             #> 2 1        1.55e8 1.55e8 -      tran… GBA       GBA-202         protein_coding   #> 3 1        1.55e8 1.55e8 -      exon  GBA       GBA-202         protein_coding   #> 4 1        1.55e8 1.55e8 -      CDS   GBA       GBA-202         protein_coding   #> 5 1        1.55e8 1.55e8 -      star… GBA       GBA-202         protein_coding   #> 6 1        1.55e8 1.55e8 -      exon  GBA       GBA-202         protein_coding  # obtain exons gba_ens_105_exons <- gba_ens_105 %>%     dplyr::filter(type == \"exon\")  gba_ens_105_exons %>%     ggplot(aes(         xstart = start,         xend = end,         y = transcript_name     )) +     geom_range(         aes(fill = transcript_biotype)     ) +     geom_intron(         data = to_intron(gba_ens_105_exons, \"transcript_name\"),         aes(strand = strand),         arrow.min.intron.length = 500,     ) # keeping only the exons from protein coding transcripts gba_ens_105_exons_prot_cod <- gba_ens_105_exons %>%     dplyr::filter(transcript_biotype == \"protein_coding\")  # obtain cds gba_ens_105_cds <- gba_ens_105 %>%     dplyr::filter(type == \"CDS\")  gba_ens_105_exons_prot_cod %>%     ggplot(aes(         xstart = start,         xend = end,         y = transcript_name     )) +     geom_range(         fill = \"white\",         height = 0.25     ) +     geom_range(         data = gba_ens_105_cds     ) +     geom_intron(         data = to_intron(gba_ens_105_exons_prot_cod, \"transcript_name\"),         aes(strand = strand),         arrow.min.intron.length = 500,     ) # using two transcripts as an example gba_ens_105_201_exons <- gba_ens_105_exons %>%     dplyr::filter(transcript_name == c(\"GBA-201\"))  gba_ens_105_201_cds <- gba_ens_105_cds %>%     dplyr::filter(transcript_name == \"GBA-201\")  # simulate junction data, randomly keeping half of the junctions gba_ens_105_201_introns <- gba_ens_105_201_exons %>%     to_intron(\"transcript_name\")  set.seed(32)  gba_ens_105_201_junctions <-     gba_ens_105_201_introns[sample(seq_len(nrow(gba_ens_105_201_introns)), 6), ]  gba_ens_105_201_exons %>%     ggplot(aes(         xstart = start,         xend = end,         y = transcript_name     )) +     geom_range(         fill = \"white\",         height = 0.25     ) +     geom_range(         data = gba_ens_105_201_cds     ) +     geom_intron(         data = gba_ens_105_201_introns,         aes(strand = strand),         arrow.min.intron.length = 500,     ) +     geom_junction(         data = gba_ens_105_201_junctions,         colour = \"red\"     )"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Visualising transcript structure and annotation using ggplot2","text":"Please note ggtranscript project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"Visualising transcript structure and annotation using ggplot2","text":"Continuous code testing possible thanks GitHub actions usethis, remotes, rcmdcheck customized use Bioconductor’s docker containers BiocCheck. Code coverage assessment possible thanks codecov covr. documentation website automatically updated thanks pkgdown. code styled automatically thanks styler. documentation formatted thanks devtools roxygen2. package developed using biocthis.","code":""},{"path":"/reference/add_exon_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Add exon number — add_exon_number","title":"Add exon number — add_exon_number","text":"add_exon_number() adds exon number (order exons transcribed within transcript) column exons. can useful visualizing long, complex transcript structures, order keep track specific exons interest.","code":""},{"path":"/reference/add_exon_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add exon number — add_exon_number","text":"","code":"add_exon_number(exons, group_var = NULL)"},{"path":"/reference/add_exon_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add exon number — add_exon_number","text":"exons data.frame() contains exons can originate multiple transcripts differentiated group_var. group_var character() input data originates 1 transcript, group_var must specify column differentiates transcripts (e.g. \"transcript_id\").","code":""},{"path":"/reference/add_exon_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add exon number — add_exon_number","text":"data.frame() equivalent input exons, additional column \"exon_number\".","code":""},{"path":"/reference/add_exon_number.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add exon number — add_exon_number","text":"note, \"strand\" column must present within exons. strand used differentiate whether exon numbers calculated according ascending (\"+\") descending (\"-\") genomic co-ordinates. ambiguous strands (\"*\"), add_exon_number() assumed strand \"+\".","code":""},{"path":"/reference/add_exon_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add exon number — add_exon_number","text":"","code":"library(magrittr)  gba_ens_105_exons <- gba_ens_105 %>%     dplyr::filter(         type == \"exon\",         transcript_name %in% paste0(\"GBA-20\", 2:8)     )  gba_ens_105_exons #> # A tibble: 45 × 8 #>    seqnames     start       end strand type  gene_name transcript_name #>    <fct>        <int>     <int> <fct>  <fct> <chr>     <chr>           #>  1 1        155241086 155241249 -      exon  GBA       GBA-202         #>  2 1        155240630 155240717 -      exon  GBA       GBA-202         #>  3 1        155239886 155240077 -      exon  GBA       GBA-202         #>  4 1        155239616 155239762 -      exon  GBA       GBA-202         #>  5 1        155238517 155238650 -      exon  GBA       GBA-202         #>  6 1        155238134 155238306 -      exon  GBA       GBA-202         #>  7 1        155237341 155237578 -      exon  GBA       GBA-202         #>  8 1        155236245 155236469 -      exon  GBA       GBA-202         #>  9 1        155235681 155235844 -      exon  GBA       GBA-202         #> 10 1        155235195 155235311 -      exon  GBA       GBA-202         #> # … with 35 more rows, and 1 more variable: transcript_biotype <chr>  gba_ens_105_exons %>%     add_exon_number(group_var = \"transcript_name\") #> # A tibble: 45 × 9 #>    seqnames     start       end strand type  gene_name transcript_name #>    <fct>        <int>     <int> <fct>  <fct> <chr>     <chr>           #>  1 1        155234452 155235100 -      exon  GBA       GBA-202         #>  2 1        155235195 155235311 -      exon  GBA       GBA-202         #>  3 1        155235681 155235844 -      exon  GBA       GBA-202         #>  4 1        155236245 155236469 -      exon  GBA       GBA-202         #>  5 1        155237341 155237578 -      exon  GBA       GBA-202         #>  6 1        155238134 155238306 -      exon  GBA       GBA-202         #>  7 1        155238517 155238650 -      exon  GBA       GBA-202         #>  8 1        155239616 155239762 -      exon  GBA       GBA-202         #>  9 1        155239886 155240077 -      exon  GBA       GBA-202         #> 10 1        155240630 155240717 -      exon  GBA       GBA-202         #> # … with 35 more rows, and 2 more variables: transcript_biotype <chr>, #> #   exon_number <dbl>  # this can be useful to label exons with their order/number base <- gba_ens_105_exons %>%     add_exon_number(group_var = \"transcript_name\") %>%     ggplot2::ggplot(         ggplot2::aes(             xstart = start,             xend = end,             y = transcript_name         )     ) +     geom_range() +     geom_intron(         data = to_intron(gba_ens_105_exons, \"transcript_name\"),         strand = \"-\",         arrow.min.intron.length = 500     )  base +     ggplot2::geom_text(ggplot2::aes(         x = (start + end) / 2, # plot label at midpoint of exon         label = exon_number     ),     size = 1.5     )   # for complex transcript structures or small exons, it can be useful to # set nudge_y to plot exon numbers above their respective exons base +     ggplot2::geom_text(ggplot2::aes(         x = (start + end) / 2, # plot label at midpoint of exon         label = exon_number     ),     size = 2.5,     nudge_y = 0.4     )   # or use ggrepel::geom_label_repel to separate labels from exons base +     ggrepel::geom_label_repel(ggplot2::aes(         x = (start + end) / 2,         label = exon_number     ),     size = 2,     min.segment.length = 0     )"},{"path":"/reference/gba_ens_105.html","id":null,"dir":"Reference","previous_headings":"","what":"Example transcript annotation — gba_ens_105","title":"Example transcript annotation — gba_ens_105","text":"Co-ordinates (hg38) genes, transcripts, exons example gene (GBA) originating Ensembl v105 reference annotation.","code":""},{"path":"/reference/gba_ens_105.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example transcript annotation — gba_ens_105","text":"","code":"gba_ens_105"},{"path":"/reference/gba_ens_105.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example transcript annotation — gba_ens_105","text":"tibble::tibble() 26 rows 4 columns: seqnames factor() chromosome. start integer() start position. end integer() end position. strand factor() strand. type factor() type data, one gene, transcript, exon CDS. gene_name character() name gene (GBA). transcript_name character() name transcript. transcript_biotype character() biotype transcript.","code":""},{"path":"/reference/gba_ens_105.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example transcript annotation — gba_ens_105","text":"generated using ggtranscript/data-raw/gba_ens_105.R","code":""},{"path":"/reference/geom_intron.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot intron lines with strand arrows — geom_intron","title":"Plot intron lines with strand arrows — geom_intron","text":"geom_intron() draws horizontal lines central arrows designed represent introns. combination geom_range()/geom_half_range(), geoms form core components visualizing transcript annotation.","code":""},{"path":"/reference/geom_intron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot intron lines with strand arrows — geom_intron","text":"","code":"geom_intron(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   arrow = grid::arrow(ends = \"last\", length = grid::unit(0.1, \"inches\")),   arrow.fill = NULL,   lineend = \"butt\",   linejoin = \"round\",   na.rm = FALSE,   arrow.min.intron.length = 0,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"/reference/geom_intron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot intron lines with strand arrows — geom_intron","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. arrow specification arrow heads, created arrow(). arrow.fill fill colour use arrow head (closed). NULL means use colour aesthetic. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. arrow.min.intron.length integer() minimum required width intron strand arrow drawn. can useful remove strand arrows short introns overlap adjacent exons. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"/reference/geom_intron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot intron lines with strand arrows — geom_intron","text":"geom_intron()  requires following aes(); xstart, xend y (e.g. transcript name). strand option (one \"+\" \"-\") adjusts arrow direction match direction transcription. arrow.min.intron.length parameter can useful remove strand arrows overlapping exons, can problem plotted introns include relatively short.","code":""},{"path":"/reference/geom_intron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot intron lines with strand arrows — geom_intron","text":"","code":"example_introns <-     dplyr::tibble(         strand = c(\"+\", \"-\"),         tx = c(\"A\", \"B\"),         start = c(201, 601),         end = c(299, 649),         type = \"intron\"     )  example_introns #> # A tibble: 2 × 5 #>   strand tx    start   end type   #>   <chr>  <chr> <dbl> <dbl> <chr>  #> 1 +      A       201   299 intron #> 2 -      B       601   649 intron  base <-     ggplot2::ggplot(         example_introns,         ggplot2::aes(             xstart = start,             xend = end,             y = tx         )     )  base + geom_intron()  base + geom_intron(strand = \"-\")   # strand can also be mapped as an aesthetic base + geom_intron(ggplot2::aes(strand = strand))   base + geom_intron(ggplot2::aes(colour = tx, strand = strand))  base + geom_intron(ggplot2::aes(     colour = tx,     strand = strand ), arrow.min.intron.length = 50 )"},{"path":"/reference/geom_junction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot junction curves — geom_junction","title":"Plot junction curves — geom_junction","text":"geom_junction() draws curves designed represent junction reads RNA-sequencing data. can useful overlay junction data transcript annotation (plotted using geom_range()/geom_half_range() geom_intron()) understand splicing events transcripts support RNA-sequencing data.","code":""},{"path":"/reference/geom_junction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot junction curves — geom_junction","text":"","code":"geom_junction(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   junction.orientation = \"alternating\",   junction.y.max = 1,   angle = 90,   ncp = 15,   na.rm = FALSE,   orientation = NA,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"/reference/geom_junction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot junction curves — geom_junction","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. junction.orientation character() one \"alternating\", \"top\" \"bottom\", specifying junctions plotted respect transcript (y). junction.y.max double() max y-value junction curve. can useful adjust parameter junction curves overlap one another/transcripts extend beyond plot margins. angle numeric value 0 180,     giving amount skew control     points curve.  Values less 90 skew curve towards     start point values greater 90 skew curve     towards end point. ncp number control points used draw curve.     control points creates smoother curve. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. orientation orientation layer. default (NA) automatically determines orientation aesthetic mapping. rare event fails can given explicitly setting orientation either \"x\" \"y\". See Orientation section detail. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"/reference/geom_junction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot junction curves — geom_junction","text":"geom_junction() requires following aes(); xstart, xend y (e.g. transcript name). geom_junction() curves can modified using junction.y.max, can useful junctions overlap one another/transcripts extend beyond plot margins. default, junction curves alternate plotted top bottom transcript (y), however can modified via junction.orientation.","code":""},{"path":"/reference/geom_junction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot junction curves — geom_junction","text":"","code":"library(magrittr)  example_introns <-     gba_ens_105 %>%     dplyr::filter(type == \"exon\") %>%     to_intron(group_var = \"transcript_name\")  example_introns #> # A tibble: 77 × 8 #>    seqnames strand type   gene_name transcript_name transcript_biotype     start #>    <fct>    <fct>  <chr>  <chr>     <chr>           <chr>                  <int> #>  1 1        -      intron GBA       GBA-202         protein_coding        1.55e8 #>  2 1        -      intron GBA       GBA-201         protein_coding        1.55e8 #>  3 1        -      intron GBA       GBA-203         protein_coding        1.55e8 #>  4 1        -      intron GBA       GBA-204         protein_coding        1.55e8 #>  5 1        -      intron GBA       GBA-211         processed_transcript  1.55e8 #>  6 1        -      intron GBA       GBA-210         processed_transcript  1.55e8 #>  7 1        -      intron GBA       GBA-206         processed_transcript  1.55e8 #>  8 1        -      intron GBA       GBA-202         protein_coding        1.55e8 #>  9 1        -      intron GBA       GBA-201         protein_coding        1.55e8 #> 10 1        -      intron GBA       GBA-203         protein_coding        1.55e8 #> # … with 67 more rows, and 1 more variable: end <int>  base <- example_introns %>%     dplyr::filter(transcript_name == \"GBA-202\") %>%     ggplot2::ggplot(ggplot2::aes(         xstart = start,         xend = end,         y = transcript_name     ))  # sometimes, depending on the number and widths of transcripts and junctions # junctions will go overlap one another or extend beyond the plot margin base + geom_junction()   # in such cases, junction.y.max can be used to rectify the max y base + geom_junction(junction.y.max = 0.5)   # junction.orientation determines where the junction are plotted # either on the top or bottom base + geom_junction(junction.orientation = \"top\", junction.y.max = 0.5)  base + geom_junction(junction.orientation = \"bottom\", junction.y.max = 0.5)   # geom_junction can also be used with multiple y values base_multi_transcript <- example_introns %>%     ggplot2::ggplot(ggplot2::aes(         xstart = start,         xend = end,         y = transcript_name     ))  base_multi_transcript + geom_junction()   # and as a ggplot2 extension can be used aes and params base_multi_transcript + geom_junction(     ggplot2::aes(colour = transcript_name),     size = 0.75 )"},{"path":"/reference/geom_junction_label_repel.html","id":null,"dir":"Reference","previous_headings":"","what":"Label junction curves — geom_junction_label_repel","title":"Label junction curves — geom_junction_label_repel","text":"geom_junction_label_repel() labels junction curves midpoint using ggrepel::geom_label_repel(). can useful label compare junctions (plotted using geom_junction()) metrics usage (e.g. count percent-spliced-).","code":""},{"path":"/reference/geom_junction_label_repel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label junction curves — geom_junction_label_repel","text":"","code":"geom_junction_label_repel(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   parse = FALSE,   ...,   junction.orientation = \"alternating\",   junction.y.max = 1,   angle = 90,   ncp = 15,   box.padding = 0.25,   label.padding = 0.25,   point.padding = 1e-06,   label.r = 0.15,   label.size = 0.25,   min.segment.length = 0,   arrow = NULL,   force = 1,   force_pull = 1,   max.time = 0.5,   max.iter = 10000,   max.overlaps = getOption(\"ggrepel.max.overlaps\", default = 10),   nudge_x = 0,   nudge_y = 0,   xlim = c(NA, NA),   ylim = c(NA, NA),   na.rm = FALSE,   show.legend = NA,   direction = c(\"both\", \"y\", \"x\"),   seed = NA,   verbose = FALSE,   inherit.aes = TRUE )"},{"path":"/reference/geom_junction_label_repel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label junction curves — geom_junction_label_repel","text":"mapping Set aesthetic mappings created aes aes_. specified inherit.aes = TRUE (default), combined default mapping top level plot. need supply mapping mapping defined plot. data data frame. specified, overrides default data frame defined top level plot. stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. parse TRUE, labels parsed expressions displayed described ?plotmath ... arguments passed layer.   three types arguments can use :  Aesthetics: set aesthetic fixed value, like        colour = \"red\" size = 3. arguments layer, example override       default stat associated layer. arguments passed stat. junction.orientation character() one \"alternating\", \"top\" \"bottom\", specifying junctions plotted respect transcript (y). junction.y.max double() max y-value junction curve. can useful adjust parameter junction curves overlap one another/transcripts extend beyond plot margins. angle numeric value 0 180,     giving amount skew control     points curve.  Values less 90 skew curve towards     start point values greater 90 skew curve     towards end point. ncp number control points used draw curve.     control points creates smoother curve. box.padding Amount padding around bounding box, unit number. Defaults 0.25. (Default unit lines, units can specified passing unit(x, \"units\")). label.padding Amount padding around label, unit number. Defaults 0.25. (Default unit lines, units can specified passing unit(x, \"units\")). point.padding Amount padding around labeled point, unit number. Defaults 0. (Default unit lines, units can specified passing unit(x, \"units\")). label.r Radius rounded corners, unit number. Defaults 0.15. (Default unit lines, units can specified passing unit(x, \"units\")). label.size Size label border, mm. min.segment.length Skip drawing segments shorter , unit number. Defaults 0.5. (Default unit lines, units can specified passing unit(x, \"units\")). arrow specification arrow heads, created arrow force Force repulsion overlapping text labels. Defaults 1. force_pull Force attraction text label corresponding data point. Defaults 1. max.time Maximum number seconds try resolve overlaps. Defaults 0.5. max.iter Maximum number iterations try resolve overlaps. Defaults 10000. max.overlaps Exclude text labels overlap many things. Defaults 10. nudge_x Horizontal vertical adjustments nudge starting position text label. units nudge_x nudge_y data units x-axis y-axis. nudge_y Horizontal vertical adjustments nudge starting position text label. units nudge_x nudge_y data units x-axis y-axis. xlim Limits x y axes. Text labels constrained limits. default, text labels constrained entire plot area. ylim Limits x y axes. Text labels constrained limits. default, text labels constrained entire plot area. na.rm FALSE (default), removes missing values warning.  TRUE silently removes missing values. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. direction \"\", \"x\", \"y\" -- direction adjust position labels seed Random seed passed set.seed. Defaults NA, means set.seed called. verbose TRUE, diagnostics repel algorithm printed inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders.","code":""},{"path":"/reference/geom_junction_label_repel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label junction curves — geom_junction_label_repel","text":"geom_junction_label_repel() requires following aes(); xstart, xend, y (e.g. transcript name) label. hood, geom_junction_label_repel() generates junction curves geom_junction() obtain curve midpoints labeling. Therefore, important users use input data parameters alter junction curves (namely junction.orientation, junction.y.max, angle, ncp) geom_junction_label_repel() used geom_junction().","code":""},{"path":"/reference/geom_junction_label_repel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label junction curves — geom_junction_label_repel","text":"","code":"library(magrittr)  example_introns <-     gba_ens_105 %>%     dplyr::filter(         type == \"exon\",         transcript_name %in% c(\"GBA-201\", \"GBA-202\")     ) %>%     to_intron(group_var = \"transcript_name\")  # add some arbitrary counts example_introns <- example_introns %>%     dplyr::mutate(         count = dplyr::row_number()     )  example_introns #> # A tibble: 21 × 9 #>    seqnames strand type   gene_name transcript_name transcript_biotype     start #>    <fct>    <fct>  <chr>  <chr>     <chr>           <chr>                  <int> #>  1 1        -      intron GBA       GBA-202         protein_coding     155235100 #>  2 1        -      intron GBA       GBA-201         protein_coding     155235100 #>  3 1        -      intron GBA       GBA-202         protein_coding     155235311 #>  4 1        -      intron GBA       GBA-201         protein_coding     155235311 #>  5 1        -      intron GBA       GBA-202         protein_coding     155235844 #>  6 1        -      intron GBA       GBA-201         protein_coding     155235844 #>  7 1        -      intron GBA       GBA-202         protein_coding     155236469 #>  8 1        -      intron GBA       GBA-201         protein_coding     155236469 #>  9 1        -      intron GBA       GBA-202         protein_coding     155237578 #> 10 1        -      intron GBA       GBA-201         protein_coding     155237578 #> # … with 11 more rows, and 2 more variables: end <int>, count <int>  base <- example_introns %>%     ggplot2::ggplot(ggplot2::aes(         xstart = start,         xend = end,         y = transcript_name     ))  base + geom_junction()   base +     geom_junction() +     geom_junction_label_repel(ggplot2::aes(label = count))   # if users modify any of the geom_junction params that alter junction curves # i.e. junction.orientation, junction.y.max, ncp, angle base +     geom_junction(junction.orientation = \"top\", junction.y.max = 0.5) +     geom_junction_label_repel(ggplot2::aes(label = count))   # users must make sure to match those arguments in geom_junction_label_repel base +     geom_junction(junction.orientation = \"top\", junction.y.max = 0.5) +     geom_junction_label_repel(         ggplot2::aes(label = count),         junction.orientation = \"top\", junction.y.max = 0.5     )"},{"path":"/reference/geom_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot genomic ranges — geom_range","title":"Plot genomic ranges — geom_range","text":"geom_range() geom_half_range() draw tiles designed represent range-based genomic features, exons. combination geom_intron(), geoms form core components visualizing transcript annotation.","code":""},{"path":"/reference/geom_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot genomic ranges — geom_range","text":"","code":"geom_range(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   vjust = NULL,   linejoin = \"mitre\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_half_range(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   range.orientation = \"bottom\",   linejoin = \"mitre\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"/reference/geom_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot genomic ranges — geom_range","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. vjust horizontal vertical justification grob.  justification value number 0 1.  Defaults 0.5 , centering pixel data location. linejoin Line join style (round, mitre, bevel). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). range.orientation character() one \"top\" \"bottom\", specifying half ranges plotted respect transcript (y).","code":""},{"path":"/reference/geom_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot genomic ranges — geom_range","text":"geom_range() geom_half_range() require following aes(); xstart, xend y (e.g. transcript name). geom_half_range() takes advantage vertical symmetry transcript annotation plotting half range top bottom transcript structure. can useful free plotting space transcript annotations (e.g. geom_junction()).","code":""},{"path":"/reference/geom_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot genomic ranges — geom_range","text":"","code":"example_exons <-     dplyr::tibble(         start = c(100, 300, 500, 650),         end = start + 100,         strand = c(\"+\", \"+\", \"-\", \"-\"),         tx = c(\"A\", \"A\", \"B\", \"B\")     )  example_exons #> # A tibble: 4 × 4 #>   start   end strand tx    #>   <dbl> <dbl> <chr>  <chr> #> 1   100   200 +      A     #> 2   300   400 +      A     #> 3   500   600 -      B     #> 4   650   750 -      B      base <-     ggplot2::ggplot(         example_exons,         ggplot2::aes(             xstart = start,             xend = end,             y = tx         )     )  base + geom_range()  base + geom_range(ggplot2::aes(fill = tx))   base + geom_half_range()  base + geom_half_range(range.orientation = \"top\")"},{"path":"/reference/ggtranscript.html","id":null,"dir":"Reference","previous_headings":"","what":"ggtranscript: Visualizing transcript structure and annotation using\nggplot2 — ggtranscript","title":"ggtranscript: Visualizing transcript structure and annotation using\nggplot2 — ggtranscript","text":"major goal ggtranscript simplify process visualizing transcript structure annotation. ggtranscript achieves introducing 4 geoms (geom_range, geom_half_range, geom_intron geom_junction) several helper functions designed visualize transcript annotation using ggplot2. ggplot2 extension, ggtranscript inherits ggplot2's familiarity flexibility; users can intuitively adjust aesthetics parameters well complement ggtranscript geoms existing ggplot2 geoms.","code":""},{"path":"/reference/shorten_gaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Improve transcript structure visualization by shortening gaps — shorten_gaps","title":"Improve transcript structure visualization by shortening gaps — shorten_gaps","text":"given set exons introns, shorten_gaps() reduces width gaps (regions overlap exons) user-inputted target_gap_width. can useful visualizing transcripts long introns, hone regions interest (.e. exons) better compare transcript structures.","code":""},{"path":"/reference/shorten_gaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Improve transcript structure visualization by shortening gaps — shorten_gaps","text":"","code":"shorten_gaps(exons, introns, group_var = NULL, target_gap_width = 100L)"},{"path":"/reference/shorten_gaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Improve transcript structure visualization by shortening gaps — shorten_gaps","text":"exons data.frame() contains exons can originate multiple transcripts differentiated group_var. introns data.frame() intron co-ordinates corresponding input exons. can created applying to_intron() exons. user using to_intron(), must make sure intron start/ends defined precisely adjacent exon boundaries (rather exon end + 1 exon start - 1). group_var character() input data originates 1 transcript, group_var must specify column differentiates transcripts (e.g. \"transcript_id\"). target_gap_width integer() width base pairs shorten gaps .","code":""},{"path":"/reference/shorten_gaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Improve transcript structure visualization by shortening gaps — shorten_gaps","text":"data.frame() contains re-scaled co-ordinates introns exons input transcript shortened gaps.","code":""},{"path":"/reference/shorten_gaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Improve transcript structure visualization by shortening gaps — shorten_gaps","text":"shorten_gaps() reduces size gaps, re-scale exons introns preserve exon alignment. process reduce width input introns, never exons. Importantly, outputted re-scaled co-ordinates used visualization match original genomic coordinates.","code":""},{"path":"/reference/shorten_gaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Improve transcript structure visualization by shortening gaps — shorten_gaps","text":"","code":"library(magrittr)  gba_ens_105_exons <- gba_ens_105 %>%     dplyr::filter(type == \"exon\")  # first, let's use an example of a single transcript single_tx <- gba_ens_105_exons %>%     dplyr::filter(transcript_name %in% c(\"GBA-203\"))  single_tx #> # A tibble: 10 × 8 #>    seqnames     start       end strand type  gene_name transcript_name #>    <fct>        <int>     <int> <fct>  <fct> <chr>     <chr>           #>  1 1        155241086 155241275 -      exon  GBA       GBA-203         #>  2 1        155240630 155240717 -      exon  GBA       GBA-203         #>  3 1        155239886 155240077 -      exon  GBA       GBA-203         #>  4 1        155238517 155238650 -      exon  GBA       GBA-203         #>  5 1        155238134 155238306 -      exon  GBA       GBA-203         #>  6 1        155237341 155237578 -      exon  GBA       GBA-203         #>  7 1        155236245 155236469 -      exon  GBA       GBA-203         #>  8 1        155235681 155235844 -      exon  GBA       GBA-203         #>  9 1        155235195 155235311 -      exon  GBA       GBA-203         #> 10 1        155234559 155235100 -      exon  GBA       GBA-203         #> # … with 1 more variable: transcript_biotype <chr>  single_tx_rescaled <- shorten_gaps(     single_tx,     to_intron(single_tx),     group_var = NULL,     target_gap_width = 100L )  # rescaled output contains both introns and exons single_tx_rescaled #> # A tibble: 19 × 8 #>    seqnames start   end strand type   gene_name transcript_name transcript_biot… #>    <fct>    <dbl> <dbl> <fct>  <chr>  <chr>     <chr>           <chr>            #>  1 1            2   543 -      exon   GBA       GBA-203         protein_coding   #>  2 1          543   638 -      intron GBA       GBA-203         protein_coding   #>  3 1          638   754 -      exon   GBA       GBA-203         protein_coding   #>  4 1          754   855 -      intron GBA       GBA-203         protein_coding   #>  5 1          855  1018 -      exon   GBA       GBA-203         protein_coding   #>  6 1         1018  1119 -      intron GBA       GBA-203         protein_coding   #>  7 1         1119  1343 -      exon   GBA       GBA-203         protein_coding   #>  8 1         1343  1444 -      intron GBA       GBA-203         protein_coding   #>  9 1         1444  1681 -      exon   GBA       GBA-203         protein_coding   #> 10 1         1681  1782 -      intron GBA       GBA-203         protein_coding   #> 11 1         1782  1954 -      exon   GBA       GBA-203         protein_coding   #> 12 1         1954  2055 -      intron GBA       GBA-203         protein_coding   #> 13 1         2055  2188 -      exon   GBA       GBA-203         protein_coding   #> 14 1         2188  2289 -      intron GBA       GBA-203         protein_coding   #> 15 1         2289  2480 -      exon   GBA       GBA-203         protein_coding   #> 16 1         2480  2581 -      intron GBA       GBA-203         protein_coding   #> 17 1         2581  2668 -      exon   GBA       GBA-203         protein_coding   #> 18 1         2668  2769 -      intron GBA       GBA-203         protein_coding   #> 19 1         2769  2958 -      exon   GBA       GBA-203         protein_coding    # create function to compare transcript visualisation # before and after shortening gaps plot_before_after <- function(before_shorten_gaps,                               after_shorten_gaps,                               group_var) {     before_plot <- before_shorten_gaps %>%         ggplot2::ggplot(ggplot2::aes_string(             xstart = \"start\",             xend = \"end\",             y = group_var         )) +         geom_range() +         geom_intron(             data = to_intron(before_shorten_gaps, group_var),             strand = \"-\",             arrow.min.intron.length = 500         )      after_plot <- after_shorten_gaps %>%         dplyr::filter(type == \"exon\") %>%         ggplot2::ggplot(ggplot2::aes_string(             xstart = \"start\",             xend = \"end\",             y = group_var         )) +         geom_range() +         geom_intron(             data = after_shorten_gaps %>%                 dplyr::filter(type == \"intron\"),             strand = \"-\",             arrow.min.intron.length = 200         )      before_after_plotlist <- list(before_plot, after_plot)      before_after_plot <- ggpubr::ggarrange(         plotlist = before_after_plotlist,         nrow = 2,         labels = c(\"Before shorten_gaps()\", \"After shorten_gaps()\")     )      return(before_after_plot) }  plot_before_after(     before_shorten_gaps = single_tx,     after_shorten_gaps = single_tx_rescaled,     group_var = \"transcript_name\" )   # exons can also contain multiple transcripts multi_tx <- gba_ens_105_exons %>%     dplyr::filter(         transcript_name %in% paste0(\"GBA-20\", 2:8)     )  multi_tx_rescaled <- shorten_gaps(     multi_tx,     to_intron(multi_tx, \"transcript_name\"),     group_var = \"transcript_name\",     target_gap_width = 100L )  plot_before_after(     before_shorten_gaps = multi_tx,     after_shorten_gaps = multi_tx_rescaled,     group_var = \"transcript_name\" )"},{"path":"/reference/to_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the differences between transcript structure — to_diff","title":"Obtain the differences between transcript structure — to_diff","text":"to_diff() obtains difference exons set transcripts reference transcript (ref_exons). can useful visualizing differences transcript structure. to_diff() expects two sets input exons; 1. exons - exons number transcripts compared ref_exons 2. ref_exons - exons single transcript acts reference compare .","code":""},{"path":"/reference/to_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the differences between transcript structure — to_diff","text":"","code":"to_diff(exons, ref_exons, group_var = NULL)"},{"path":"/reference/to_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the differences between transcript structure — to_diff","text":"exons data.frame() contains exons can originate multiple transcripts differentiated group_var. ref_exons data.frame() contains exons originate single transcript, exons compared . group_var character() input data originates 1 transcript, group_var must specify column differentiates transcripts (e.g. \"transcript_id\").","code":""},{"path":"/reference/to_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the differences between transcript structure — to_diff","text":"data.frame() details differences exons ref_exons.","code":""},{"path":"/reference/to_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain the differences between transcript structure — to_diff","text":"","code":"library(magrittr)  gba_ens_105_exons <- gba_ens_105 %>%     dplyr::filter(type == \"exon\")  gba_ens_105_exons #> # A tibble: 91 × 8 #>    seqnames     start       end strand type  gene_name transcript_name #>    <fct>        <int>     <int> <fct>  <fct> <chr>     <chr>           #>  1 1        155241086 155241249 -      exon  GBA       GBA-202         #>  2 1        155240630 155240717 -      exon  GBA       GBA-202         #>  3 1        155239886 155240077 -      exon  GBA       GBA-202         #>  4 1        155239616 155239762 -      exon  GBA       GBA-202         #>  5 1        155238517 155238650 -      exon  GBA       GBA-202         #>  6 1        155238134 155238306 -      exon  GBA       GBA-202         #>  7 1        155237341 155237578 -      exon  GBA       GBA-202         #>  8 1        155236245 155236469 -      exon  GBA       GBA-202         #>  9 1        155235681 155235844 -      exon  GBA       GBA-202         #> 10 1        155235195 155235311 -      exon  GBA       GBA-202         #> # … with 81 more rows, and 1 more variable: transcript_biotype <chr>  # for example, let's compare other transcripts to the MANE-select transcript mane <- gba_ens_105_exons %>%     dplyr::filter(transcript_name == \"GBA-202\")  single_tx <- gba_ens_105_exons %>%     dplyr::filter(transcript_name %in% c(\"GBA-203\"))  single_tx_diffs <- to_diff(     exons = single_tx,     ref_exons = mane )  single_tx_diffs #>   seqnames     start       end width strand type  diff_type #> 1        1 155234452 155234558   107      - diff     in_ref #> 2        1 155239616 155239762   147      - diff     in_ref #> 3        1 155241250 155241275    26      - diff not_in_ref  # exons can also contain multiple transcripts multi_tx <- gba_ens_105_exons %>%     dplyr::filter(transcript_name %in% c(\"GBA-203\", \"GBA-201\", \"GBA-204\"))  multi_tx_diffs <- to_diff(     exons = multi_tx,     ref_exons = mane,     group_var = \"transcript_name\" )  multi_tx_diffs #>   seqnames     start       end width strand type  diff_type transcript_name #> 1        1 155241181 155241249    69      - diff     in_ref         GBA-201 #> 2        1 155244506 155244670   165      - diff not_in_ref         GBA-201 #> 3        1 155234452 155234558   107      - diff     in_ref         GBA-203 #> 4        1 155239616 155239762   147      - diff     in_ref         GBA-203 #> 5        1 155241250 155241275    26      - diff not_in_ref         GBA-203 #> 6        1 155234452 155234867   416      - diff     in_ref         GBA-204 #> 7        1 155240630 155240717    88      - diff     in_ref         GBA-204 #> 8        1 155241086 155241249   164      - diff     in_ref         GBA-204 #> 9        1 155244506 155244699   194      - diff not_in_ref         GBA-204  # an example of visualising differences mane %>%     dplyr::bind_rows(multi_tx) %>%     dplyr::mutate(         transcript_name = transcript_name %>%             factor(levels = c(\"GBA-202\", \"GBA-201\", \"GBA-203\", \"GBA-204\"))     ) %>%     ggplot2::ggplot(         ggplot2::aes(             xstart = start,             xend = end,             y = transcript_name         )     ) +     geom_range() +     geom_range(         data = multi_tx_diffs,         ggplot2::aes(fill = diff_type),         alpha = 0.2,     ) +     ggplot2::scale_y_discrete(         labels = c(\"MANE Select\", \"GBA-201\", \"GBA-203\", \"GBA-204\")     )"},{"path":"/reference/to_intron.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert exon co-ordinates to introns — to_intron","title":"Convert exon co-ordinates to introns — to_intron","text":"Given set exons, to_intron() return corresponding introns. exons contains data originating 1 transcript, group_var must specify column differentiates transcripts (e.g. \"transcript_id\").","code":""},{"path":"/reference/to_intron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert exon co-ordinates to introns — to_intron","text":"","code":"to_intron(exons, group_var = NULL)"},{"path":"/reference/to_intron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert exon co-ordinates to introns — to_intron","text":"exons data.frame() contains exons can originate multiple transcripts differentiated group_var. group_var character() input data originates 1 transcript, group_var must specify column differentiates transcripts (e.g. \"transcript_id\").","code":""},{"path":"/reference/to_intron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert exon co-ordinates to introns — to_intron","text":"important note , visualisation purposes, to_intron() defines introns precisely exon boundaries, rather intron start/end (exon end + 1)/(exon start - 1).","code":""},{"path":"/reference/to_intron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert exon co-ordinates to introns — to_intron","text":"","code":"library(magrittr)  example_exons <-     dplyr::tibble(         start = c(5, 10, 15, 20),         end = c(7, 12, 17, 22),         tx = c(\"A\", \"A\", \"B\", \"B\")     )  example_exons #> # A tibble: 4 × 3 #>   start   end tx    #>   <dbl> <dbl> <chr> #> 1     5     7 A     #> 2    10    12 A     #> 3    15    17 B     #> 4    20    22 B      to_intron(example_exons, group_var = \"tx\") #> # A tibble: 2 × 4 #>   tx    start   end type   #>   <chr> <dbl> <dbl> <chr>  #> 1 A         7    10 intron #> 2 B        17    20 intron  # this can be convenient when plotting transcript annotation example_exons %>%     ggplot2::ggplot(         ggplot2::aes(             xstart = start,             xend = end,             y = tx         )     ) +     geom_range() +     geom_intron(         data = to_intron(example_exons, \"tx\")     )"},{"path":"/news/index.html","id":"ggtranscript-0991","dir":"Changelog","previous_headings":"","what":"ggtranscript 0.99.1","title":"ggtranscript 0.99.1","text":"NEW FEATURES Implement base geoms: geom_range, geom_half_range, geom_intron helper functions: to_intron, to_diff shorten_gaps","code":""}]
